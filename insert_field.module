<?php

/**
 * Implements hook_form_FROM_ID_alter().
 *
 * Alters the Field UI Form for easy insert configuration.
 */
function insert_field_form_field_ui_field_overview_form_alter(&$form, &$form_state, $entity_type, $bundle) {
  $entity_type = $form['#entity_type'];
  $bundle = $form['#bundle'];

  // Get the Field Instances.
  $instances = field_info_instances($entity_type, $bundle);

  $settings = insert_field_widget_settings($instances);

  $form = insert_field_format_fields($form, $settings);

  // Attach the custom Insert Field Javascript.
  $form['#attached']['js'][] = drupal_get_path('module', 'insert_field') . '/js/insert_field.field_ui.js';

  // Add a submit callback.
  $form['#submit'][] = 'insert_field_field_ui_submit';

}

/**
 * Get Field Widget Settings.
 */
function insert_field_widget_settings($instances) {
    $settings = array();

    foreach ($instances as $field => $instance) {
      $settings[$field] = $instance['widget'];
    }

    return $settings;
}

/**
 * Get Field Widget Settings.
 */
function insert_field_display_settings($instances, $view_mode) {
    $settings = array();

    foreach ($instances as $field => $instance) {

      $mode = $view_mode;

      if (empty($instance['display'][$mode])) {
        $mode = 'default';
      }

      $settings[$field] = $instance['display'][$mode];

    }

    return $settings;
}

/**
 * Field UI Form Submit Callback.
 *
 * Saves the Field Parent.
 */
function insert_field_field_ui_submit($form, &$form_state) {
  $form_values = $form_state['values']['fields'];
  $entity_type = $form['#entity_type'];
  $bundle = $form['#bundle'];

  // Update field parents.
  foreach ($form_values as $key => $values) {

    // If the field is an Extra Field, it cannot have a parent.
    if (in_array($key, $form['#extra'])) {
      continue;
    }

    // Add the Parent Value & Update the Field Instance.
    if (in_array($key, $form['#fields'])) {
      $instance = field_read_instance($entity_type, $key, $bundle);
      $instance['widget']['parent'] = $values['parent'];
      field_update_instance($instance);
    }

  }

}

/**
 * Implements hook_library().
 *
 * Registers the jQuery Caret Library.
 */
function insert_field_library() {

  $libraries['jquery.caret'] = array(
    'title' => 'jQuery Caret Plugin',
    'website' => 'https://github.com/acdvorak/jquery.caret/',
    'version' => '1.5.2',
    'js' => array(
      drupal_get_path('module', 'insert_field') . '/js/jquery.caret.js' => array(
        'group' => JS_LIBRARY,
        'weight' => 2
      ),
    ),
    'dependencies' => array(
      array('system', 'jquery'),
    ),
  );

  return $libraries;

}

/**
 * Implements hook_field_attach_form().
 *
 * Creates the tabs on the Entity Edit Form.
 */
function insert_field_field_attach_form($entity_type, $entity, &$form, &$form_state, $langcode) {
  global $theme;

  // Get the Field Instances.
  $instances = field_info_instances($entity_type, $form['#bundle']);

  $parents = array();

  // Loop through the Field Instances.
  foreach ($instances as $field => $instance) {

    // If the Instance has no parent, continue.
    if (empty($instance['widget']['parent'])) {
      continue;
    }

    // Add to the list of Parents.
    $parents[$instance['widget']['parent']] = $instance['widget']['parent'];

  }

  // Loop through the Parents.
  foreach ($parents as $parent) {

    // Add the Tabs to the Parent.
    $form[$parent.'_insert'] = array(
      '#parents' => array(),
      '#weight' => $form[$parent]['#weight'] - 0.5,
      'insert' => array(
        '#type' => 'container',
        '#attributes' => array(
          'id' => drupal_html_id('insert-'.$parent),
          'class' => array(
            'insert-field-tabs',
          ),
        ),
        'list' => array(
          '#theme' => 'item_list',
          '#items' => array(),
          '#attributes' => array(),
          '#weight' => -1,
        ),
        'fields' => array(),
      ),
    );

  }

  // Loop through the Field Instances (again).
  foreach ($instances as $field => $instance) {

    // If the Field has no parent, continue.
    if (empty($instance['widget']['parent'])) {
      continue;
    }

    // Get the Parent.
    $parent = $instance['widget']['parent'];

    // Create a predictable HTML ID.
    $id = drupal_html_id($field);

    // Create a link to the field.
    $link = l($instance['label'], '', array(
      'fragment' => $id,
      'external' => TRUE,
      'attributes' => array(),
    ));

    // Add the link to the Parent.
    $form[$parent.'_insert']['insert']['list']['#items'][]['data'] = $link;

    // Add the field to the list of tabs.
    $form[$parent.'_insert']['insert']['fields'][$field] = $form[$field];

    // Set the HTML ID on the field.
    $form[$parent.'_insert']['insert']['fields'][$field]['#attributes']['id'] = $id;

    // Loop through all the languages on a field.
    foreach (element_children($form[$parent.'_insert']['insert']['fields'][$field]) as $lang) {

      // Get all of the available Deltas.
      $deltas = element_children($form[$parent.'_insert']['insert']['fields'][$field][$lang]);

      // If there are no deltas, the formatter is not delta specific.
      // The only option, therefore, is to insert the entire field.
      if (!count($deltas)) {

        $form[$parent.'_insert']['insert']['fields'][$field]['insert'] = array(
          '#type' => 'button',
          '#value' => t('Insert'),
          '#weight' => 100,
          '#attributes' => array(
            'name' => $field,
            'class' => array(
              'insert-button'
            ),
          ),
        );

      }

      // Loop through all of the items on a field.
      foreach ($deltas as $delta) {

        // If the delta is non-numeric, continue.
        if (!is_numeric($delta)) {
          continue;
        }

        // Add the Insert Button to each field delta.
        $form[$parent.'_insert']['insert']['fields'][$field][$lang][$delta]['insert'] = array(
          '#type' => 'button',
          '#value' => t('Insert'),
          '#weight' => 100,
          '#attributes' => array(
            'name' => $field.'['.$delta.']',
            'class' => array(
              'insert-button'
            ),
          ),
        );

      }

    }

    // Remove the original field from the form.
    unset($form[$field]);

  }

  // Attach the jQuery UI Tabs Library.
  $form['#attached']['library'][] = array('system', 'ui.tabs');

  // Attach the jQuery Caret Library.
  $form['#attached']['library'][] = array('insert_field', 'jquery.caret');

  // Attach the custom Insert Field Javascript.
  $form['#attached']['js'][] = drupal_get_path('module', 'insert_field') . '/js/insert_field.js';

  // Attach the custom Insert Field CSS.
  if ($theme == 'seven') {
    $path = drupal_get_path('module', 'insert_field') . '/css/insert_field.seven.css';
    $form['#attached']['css'][] = $path;
  }

}

/**
 * Implements hook_field_attach_submit().
 *
 * Modifies the Inserted Field's delta,
 * which ensures that when an item is moved or deleted
 * the proper existing item is still referenced.
 */
function insert_field_field_attach_submit($entity_type, $entity, $form, &$form_state) {
  $entity_type = $form['#entity_type'];
  $bundle = $form['#bundle'];

  // Get the Field Instances.
  $instances = field_info_instances($entity_type, $bundle);

  // Loop through the Field Instances.
  foreach ($instances as $field_name => $instance) {

    // If the Field does not have a Parent, continue.
    if (empty($instance['widget']['parent'])) {
      continue;
    }

    // Set the parent.
    $parent = $instance['widget']['parent'];

    // Get the Field Info by ID.
    $field = field_info_field_by_id($instance['field_id']);

    // Set the _field_is_empty() funciton.
    $function = $field['module'] . '_field_is_empty';

    // Loop through the Field Values.
    foreach ($form_state['values'][$field_name] as $lang => $items) {

      // If the Items are not an array, continue.
      if (!is_array($items)) {
        continue;
      }

      // Loop through the Field Items.
      foreach ($items as $delta => $item) {

        // If the Field is Not Empty, continue.
        if (!$function($item, $field)) {
          continue;
        }

        // Set the Regular Expression for replacing the Item.
        $regex = "/<!-- ".$field_name."\\[".$delta."\\] -->/um";

        // Loop through the Parent Items of the same language.
        foreach ($entity->{$parent}[$lang] as &$parent_item) {

          // If the Parent has no value, continue.
          if (empty($parent_item['value'])) {
            continue;
          }

          // Replace the Field(s) that have been deleted.
          $parent_item['value'] = preg_replace($regex, "", $parent_item['value']);

        }

        unset($items[$delta]);

      }

      // Sort the items according to their new positions.
      $sorted = $items;

      foreach ($sorted as $key => $value) {

        // Remove non-array items, which causes a mis-match in delta.
        if (!is_array($value)) {
          unset($sorted[$key]);
          continue;
        }

        // Remove Items that have no weight.
        if (!isset($value['_weight'])) {
          unset($sorted[$key]);
          continue;
        }

      }

      usort($sorted, '_field_sort_items_helper');


      // Loop through the now filtered field items.
      foreach ($items as $delta => $item) {

        // If there is no _weight, continue.
        if (empty($item['_weight'])) {
          continue;
        }

        // Loop through the sorted items and determine
        // if the delta has changed.
        $new_delta = NULL;
        $sorted_item = reset($sorted);
        while ($new_delta == NULL && $sorted_item !== FALSE) {

          // If the _weight matches, this is the same item.
          if ($sorted_item['_weight'] === $item['_weight']) {
            $new_delta = key($sorted);
          }

          $sorted_item = next($sorted);
        }

        // If there is no new delta found, or the delta is the
        // same, continue.
        if ($new_delta === NULL || $delta === $new_delta) {
          continue;
        }

        // Set the Regular Expression for replacing the Item.
        $regex = "/<!-- ".$field_name."\\[".$delta."\\] -->/um";
        $replacement = '<!-- '.$field_name.'[--'.$new_delta.'--] -->';

        // Loop through the Parent Items of the same language.
        foreach ($entity->{$parent}[$lang] as $delta => $parent_item) {

          // If the Parent has no value, continue.
          if (empty($parent_item['value'])) {
            continue;
          }

          // Replace the Field(s) that have changed position.
          $parent_item['value'] = preg_replace($regex, $replacement, $parent_item['value']);

        }

      }

      // Set the Regular Expression for fixing the temporary replacement pattern.
      $regex = "/<!-- ".$field_name."\\[--(\\d+)--\\] -->/um";
      $replacement = "<!-- ".$field_name."[$1] -->";

      // Loop through the Parent Items of the same language.
      foreach ($entity->{$parent}[$lang] as $delta => &$parent_item) {

        // If the Parent has no value, continue.
        if (empty($parent_item['value'])) {
          continue;
        }

        // Replace the Field(s) that have changed position.
        $parent_item['value'] = preg_replace($regex, $replacement, $parent_item['value']);

      }

    }

  }

}

/**
 * Implements hook_form_FROM_ID_alter().
 *
 * Alters the Field UI Display for easy insert configuration.
 */
function insert_field_form_field_ui_display_overview_form_alter(&$form, &$form_state, $entity_type, $bundle) {
  $entity_type = $form['#entity_type'];
  $bundle = $form['#bundle'];
  $view_mode = $form['#view_mode'];

  // Get the Field Instances.
  $instances = field_info_instances($entity_type, $bundle);

  $settings = insert_field_display_settings($instances, $view_mode);

  $form = insert_field_format_fields($form, $settings);

  // Attach the custom Insert Field Javascript.
  $form['#attached']['js'][] = drupal_get_path('module', 'insert_field') . '/js/insert_field.field_ui.js';

  // Add a submit callback.
  $form['#submit'][] = 'insert_field_field_ui_display_submit';

}

/**
 * Field UI Display Form Submit Callback.
 *
 * Saves the Field Parent.
 */
function insert_field_field_ui_display_submit($form, &$form_state) {
  $form_values = $form_state['values']['fields'];
  $entity_type = $form['#entity_type'];
  $view_mode = $form['#view_mode'];
  $bundle = $form['#bundle'];

  // Update field parents.
  foreach ($form_values as $key => $values) {

    // If the field is an Extra Field, it cannot have a parent.
    if (in_array($key, $form['#extra'])) {
        continue;
    }

    // Add the Parent Value & Update the Field Instance.
    if (in_array($key, $form['#fields'])) {
      $instance = field_read_instance($entity_type, $key, $bundle);
      $instance['display'][$view_mode]['parent'] = $values['parent'];
      field_update_instance($instance);
    }

  }

}

/*
 * Formats the Form Fields and Returns the Parents array.
 */
function insert_field_format_fields($form, $settings) {

  $parents = array();

  // Fields can be inserted into Long Text fields.
  $types = array(
    'text_long',
    'text_with_summary',
  );

  // Loop through all of the Fields.
  foreach (element_children($form['fields']) as $field) {

    // Do not allow the Extra Fields to be inserted.
    if ($form['fields'][$field]['#row_type'] == 'extra_field') {
      continue;
    }

    // Get the info for the current field.
    $info = field_info_field($field);

    // Remove the class that prevents them from having children
    // and create an array of potential parrents.
    if (in_array($info['type'], $types)) {

      unset($form['fields'][$field]['#attributes']['class'][1]);

      if (!empty($form['fields'][$field]['human_name'])) {
        $label = 'human_name';
      }
      else if (!empty($form['fields'][$field]['label']['#markup'])) {
        $label = 'label';
      }

      $parents[$field] = $form['fields'][$field][$label]['#markup'];

    }

  }

  $form['#attached']['js'][] = array(
    'data' => array(
      'insert_field' => array(
        'field_settings' => $settings,
        'parents' => $parents,
      ),
    ),
    'type' => 'setting',
  );

  // Loop through all of the Fields.
  foreach (element_children($form['fields']) as $field) {

    // If this is an Extra Field, it cannot have any parents.
    if ($form['fields'][$field]['#row_type'] == 'extra_field') {
      continue;
    }

    // Add the Parent Options to the Field.
    if (!empty($settings[$field]['parent'])) {
      $parent = $settings[$field]['parent'];
      $form['fields'][$field]['parent_wrapper']['parent']['#default_value'] = $parent;
    }
    $form['fields'][$field]['parent_wrapper']['parent']['#options'] = $parents;

  }

  return $form;

}

/*
 * Implements hook_filter_info_alter().
 *
 * filter_html prevents HTML Comments.
 * Change the callback to first escape the the text before processing.
 */
function insert_field_filter_info_alter(&$info) {
  $info['filter_html']['prepare callback'] = '_insert_field_filter_html_prepare';
  $info['filter_html']['process callback'] = '_insert_field_filter_html';
}

/*
 * Filter HTML Prepare Callback.
 */
function _insert_field_filter_html_prepare($text, $filter) {

  // Escape Insert Field HTML Comments by changing '<' and '>' to '[' and ']'.
  $text = preg_replace("/<(!-- \\w+(\\[\\d+\\])? --)>/um", "[$1]", $text);

  return $text;
}

/*
 * Filter HTML Callback.
 */
function _insert_field_filter_html($text, $filter) {

  // Process the Filter as normal while the Insert Field Comments are escaped.
  $text = _filter_html($text, $filter);

  // Revert the Escaped Text.
  $text = preg_replace("/\\[(!-- \\w+(\\[\\d+\\])? --)\\]/um", "<$1>", $text);

  return $text;
}

/*
 * Implements hook_entity_view_alter().
 *
 * Process the Entity and Insert the Fields.
 */
function insert_field_entity_view_alter(&$build, $type) {
  $entity_type = $build['#entity_type'];
  $view_mode = $build['#view_mode'];
  $bundle = $build['#bundle'];

  // Get the Field Instances.
  $instances = field_info_instances($entity_type, $bundle);

  $settings = insert_field_display_settings($instances, $view_mode);

  foreach (element_children($build) as $field) {

    if (empty($settings[$field]['parent'])) {
      continue;
    }

    $parent = $settings[$field]['parent'];

    if (empty($build[$parent])) {
      continue;
    }

    foreach (element_children($build[$field]) as $delta) {

      $item = insert_field_single_item($build[$field], $delta);

      foreach (element_children($build[$parent]) as $parent_delta) {

        $output = drupal_render($item);
        $regex = "/<!-- ".$field."\\[".$delta."\\] -->/um";

        $markup = $build[$parent][$parent_delta]['#markup'];

        $build[$parent][$parent_delta]['#markup'] = preg_replace($regex, $output, $markup);

      }

      $output = drupal_render($build[$field]);

      $regex = "/<!-- ".$field." -->/um";

      $markup = $build[$parent][$parent_delta]['#markup'];

      $build[$parent][$parent_delta]['#markup'] = preg_replace($regex, $output, $markup);

    }

    $build[$field]['#access'] = FALSE;

  }

}

/*
 * Remove all items except for the one specified.
 */
function insert_field_single_item($field, $item) {

  foreach (element_children($field) as $delta) {

    if ($delta == $item) {
      continue;
    }

    unset($field[$delta]);

  }

  if ($item !== 0) {

    $field[0] = $field[$item];

    unset($field[$item]);

  }

  return $field;

}

/**
 * Implements hook_form_FROM_ID_alter().
 *
 * field_ui_field_edit_form pulls the instance from the values, rather than the database,
 * this removed the 'parent' element.
 */
function insert_field_form_field_ui_field_edit_form_alter(&$form, &$form_state, $instance) {

  // Add a submit callback before all other callbacks.
  array_unshift($form['#submit'], 'insert_field_field_ui_field_edit_form_submit');

}

/**
 * Submit Callback for field_ui_field_edit_form.
 *
 * Merges the default values with the ones provided.
 */
function insert_field_field_ui_field_edit_form_submit(&$form, &$form_state) {

  // Get the Needed VAlues.
  $instance = $form_state['values']['instance'];
  $entity_type = $instance['entity_type'];
  $field_name = $instance['field_name'];
  $bundle = $instance['bundle'];

  // Get the Unmodified Instance.
  $instance_source = field_read_instance($entity_type, $field_name, $bundle);

  // Add the Parent to the values.
  if (!empty($instance_source['widget']['parent'])) {
    $form_state['values']['instance']['widget']['parent'] = $instance_source['widget']['parent'];
  }

}
